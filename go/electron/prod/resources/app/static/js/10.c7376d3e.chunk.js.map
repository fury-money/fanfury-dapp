{"version":3,"sources":["packages/screens/WalletManager/components/TokenAllocation.tsx"],"names":["TokenAllocation","_ref","style","selectedWallet","useSelectedWallet","selectedNetWorkId","networkId","balances","useBalances","address","filter","bal","usdAmount","usdSum","reduce","total","_jsxs","View","children","_jsx","BrandText","marginBottom","fontSize","flexDirection","alignItems","justifyContent","VictoryPie","innerRadius","padAngle","height","width","colorScale","map","currency","getNativeCurrency","denom","color","labels","data","y","padding","marginLeft","item","_item$usdAmount","CurrencyIcon","size","displayName","toFixed","borderLeftWidth","borderColor","neutral33","paddingLeft"],"mappings":"wFAAA,wIAeaA,EAAkD,SAAHC,GAAmB,IAAbC,EAAKD,EAALC,MAC1DC,EAAiBC,oBACjBC,GAAkC,MAAdF,OAAc,EAAdA,EAAgBG,YAAa,GAEjDC,EADcC,sBAAYH,EAAiC,MAAdF,OAAc,EAAdA,EAAgBM,SACtCC,QAC3B,SAACC,GAAG,OAAKA,EAAIC,WAAaD,EAAIC,UAAY,KAGtCC,EAASN,EAASO,QACtB,SAACC,EAAOJ,GAAG,OAAKI,GAASJ,EAAIC,WAAa,KAC1C,GAGF,OACEI,eAACC,UAAI,CAACf,MAAO,CAACA,GAAOgB,SAAA,CACnBC,cAACC,YAAS,CAAClB,MAAO,CAAEmB,aAAc,GAAIC,SAAU,IAAKJ,SAAC,qBAGtDF,eAACC,UAAI,CACHf,MAAO,CACLqB,cAAe,MACfC,WAAY,SACZC,eAAgB,iBAChBP,SAAA,CAEFC,cAACO,UAAU,CACTC,YAAa,GACbC,SAAU,GACVC,OAAQ,IACRC,MAAO,IACPC,WAAYxB,EAASyB,KAAI,SAACrB,GACxB,IAAMsB,EAAWC,4BAAkB7B,EAAmBM,EAAIwB,OAC1D,OAAe,MAARF,OAAQ,EAARA,EAAUG,QAAS,aAE5BC,OAAQ,kBAAM,MACdC,KAAM/B,EAASyB,KAAI,SAACrB,GAClB,MAAO,CACL4B,EAAG5B,EAAIC,WAAa,MAGxB4B,QAAS,IAGXrB,cAACF,UAAI,CAACf,MAAO,CAAEuC,WAAY,GAAIX,MAAO,KAAMZ,SACzCX,EAASyB,KAAI,SAACU,GAAU,IAADC,EAChBV,EAAWC,4BAAkB7B,EAAmBqC,EAAKP,OAC3D,OACEnB,eAACC,UAAI,CAEHf,MAAO,CACLqB,cAAe,MACfC,WAAY,SACZC,eAAgB,gBAChBJ,aAAc,IACdH,SAAA,CAEFC,cAACyB,eAAY,CACXtC,UAAWD,EACX8B,MAAOO,EAAKP,MACZU,KAAM,KAER1B,cAACC,YAAS,CACRlB,MAAO,CACLuC,WAAY,EACZX,MAAO,IACPR,SAAU,IACVJ,SAEO,MAARe,OAAQ,EAARA,EAAUa,cAEb9B,eAACI,YAAS,CACRlB,MAAO,CACLoB,SAAU,IACVJ,SAAA,CACH,IACiB,OAAfyB,EAACD,EAAK9B,gBAAS,EAAd+B,EAAgBI,QAAQ,MAE5B/B,eAACI,YAAS,CACRlB,MAAO,CACLoB,SAAU,GACV0B,gBAAiB,EACjBC,YAAaC,YACbC,YAAa,GACbV,WAAY,IACZvB,SAAA,GAEEwB,EAAK9B,WAAa,GAAKC,EAAU,KAAKkC,QAAQ,GAAG,SAtC1C,MAARd,OAAQ,EAARA,EAAUE","file":"static/js/10.c7376d3e.chunk.js","sourcesContent":["import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\nimport { VictoryPie } from \"victory-native\";\n\nimport { BrandText } from \"../../../components/BrandText\";\nimport { CurrencyIcon } from \"../../../components/CurrencyIcon\";\nimport { useBalances } from \"../../../hooks/useBalances\";\nimport useSelectedWallet from \"../../../hooks/useSelectedWallet\";\nimport { getNativeCurrency } from \"../../../networks\";\nimport { neutral33 } from \"../../../utils/style/colors\";\n\ninterface TokenAllocationProps {\n  style?: ViewStyle;\n}\n\nexport const TokenAllocation: React.FC<TokenAllocationProps> = ({ style }) => {\n  const selectedWallet = useSelectedWallet();\n  const selectedNetWorkId = selectedWallet?.networkId || \"\";\n  const allBalances = useBalances(selectedNetWorkId, selectedWallet?.address);\n  const balances = allBalances.filter(\n    (bal) => bal.usdAmount && bal.usdAmount > 0\n  );\n\n  const usdSum = balances.reduce(\n    (total, bal) => total + (bal.usdAmount || 0),\n    0\n  );\n\n  return (\n    <View style={[style]}>\n      <BrandText style={{ marginBottom: 24, fontSize: 20 }}>\n        Token Allocation\n      </BrandText>\n      <View\n        style={{\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <VictoryPie\n          innerRadius={85}\n          padAngle={0.8}\n          height={216}\n          width={216}\n          colorScale={balances.map((bal) => {\n            const currency = getNativeCurrency(selectedNetWorkId, bal.denom);\n            return currency?.color || \"#FFFFFF\";\n          })}\n          labels={() => null}\n          data={balances.map((bal) => {\n            return {\n              y: bal.usdAmount || 0,\n            };\n          })}\n          padding={0}\n        />\n\n        <View style={{ marginLeft: 32, width: 216 }}>\n          {balances.map((item) => {\n            const currency = getNativeCurrency(selectedNetWorkId, item.denom);\n            return (\n              <View\n                key={currency?.denom}\n                style={{\n                  flexDirection: \"row\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                  marginBottom: 16,\n                }}\n              >\n                <CurrencyIcon\n                  networkId={selectedNetWorkId}\n                  denom={item.denom}\n                  size={24}\n                />\n                <BrandText\n                  style={{\n                    marginLeft: 8,\n                    width: 120,\n                    fontSize: 14,\n                  }}\n                >\n                  {currency?.displayName}\n                </BrandText>\n                <BrandText\n                  style={{\n                    fontSize: 14,\n                  }}\n                >\n                  ${item.usdAmount?.toFixed(2)}\n                </BrandText>\n                <BrandText\n                  style={{\n                    fontSize: 14,\n                    borderLeftWidth: 1,\n                    borderColor: neutral33,\n                    paddingLeft: 12,\n                    marginLeft: 12,\n                  }}\n                >\n                  {(((item.usdAmount || 0) / usdSum) * 100).toFixed(2)}%\n                </BrandText>\n              </View>\n            );\n          })}\n        </View>\n      </View>\n    </View>\n  );\n};\n"],"sourceRoot":""}