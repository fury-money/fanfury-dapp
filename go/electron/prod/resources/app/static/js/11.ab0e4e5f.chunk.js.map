{"version":3,"sources":["node_modules/osmojs/module/codegen/osmosis/concentrated-liquidity/pool-model/query.lcd.js"],"names":["LCDQueryClient","requestClient","this","req","pools","bind","params","liquidityDepthsForRange","userPositions","totalLiquidityForRange","claimableFees","positionById","pagination","undefined","options","get","_params","poolId","pool_id","lowerTick","lower_tick","upperTick","upper_tick","endpoint","address","positionId","position_id"],"mappings":"wFAAA,6EAEO,MAAMA,EACX,aAAY,cACVC,IAEA,kBAAgBC,KAAM,WAAO,GAE7BA,KAAKC,IAAMF,EACXC,KAAKE,MAAQF,KAAKE,MAAMC,KAAKH,MAC7BA,KAAKI,OAASJ,KAAKI,OAAOD,KAAKH,MAC/BA,KAAKK,wBAA0BL,KAAKK,wBAAwBF,KAAKH,MACjEA,KAAKM,cAAgBN,KAAKM,cAAcH,KAAKH,MAC7CA,KAAKO,uBAAyBP,KAAKO,uBAAuBJ,KAAKH,MAC/DA,KAAKQ,cAAgBR,KAAKQ,cAAcL,KAAKH,MAC7CA,KAAKS,aAAeT,KAAKS,aAAaN,KAAKH,MAK7C,YAAYI,EAAS,CACnBM,gBAAYC,IAEZ,MAAMC,EAAU,CACdR,OAAQ,IAGyE,qBAA5D,OAAXA,QAA8B,IAAXA,OAAoB,EAASA,EAAOM,aACjE,8BAAoBE,EAASR,EAAOM,YAItC,aAAaV,KAAKC,IAAIY,IADL,8CACmBD,GAKtC,aAAaE,EAAU,IAErB,aAAad,KAAKC,IAAIY,IADL,gDAMnB,8BAA8BT,GAC5B,MAAMQ,EAAU,CACdR,OAAQ,IAGqE,qBAAxD,OAAXA,QAA8B,IAAXA,OAAoB,EAASA,EAAOW,UACjEH,EAAQR,OAAOY,QAAUZ,EAAOW,QAGgD,qBAA3D,OAAXX,QAA8B,IAAXA,OAAoB,EAASA,EAAOa,aACjEL,EAAQR,OAAOc,WAAad,EAAOa,WAG6C,qBAA3D,OAAXb,QAA8B,IAAXA,OAAoB,EAASA,EAAOe,aACjEP,EAAQR,OAAOgB,WAAahB,EAAOe,WAIrC,aAAanB,KAAKC,IAAIY,IADL,mEACmBD,GAKtC,oBAAoBR,GAClB,MAAMQ,EAAU,CACdR,OAAQ,IAGqE,qBAAxD,OAAXA,QAA8B,IAAXA,OAAoB,EAASA,EAAOW,UACjEH,EAAQR,OAAOY,QAAUZ,EAAOW,QAGlC,MAAMM,EAAW,mDAAmDjB,EAAOkB,QAC3E,aAAatB,KAAKC,IAAIY,IAAIQ,EAAUT,GAKtC,6BAA6BR,GAC3B,MAAMQ,EAAU,CACdR,OAAQ,IAGqE,qBAAxD,OAAXA,QAA8B,IAAXA,OAAoB,EAASA,EAAOW,UACjEH,EAAQR,OAAOY,QAAUZ,EAAOW,QAIlC,aAAaf,KAAKC,IAAIY,IADL,kEACmBD,GAMtC,oBAAoBR,GAClB,MAAMQ,EAAU,CACdR,OAAQ,IAGyE,qBAA5D,OAAXA,QAA8B,IAAXA,OAAoB,EAASA,EAAOmB,cACjEX,EAAQR,OAAOoB,YAAcpB,EAAOmB,YAItC,aAAavB,KAAKC,IAAIY,IADL,uDACmBD,GAKtC,mBAAmBR,GACjB,MAAMQ,EAAU,CACdR,OAAQ,IAGyE,qBAA5D,OAAXA,QAA8B,IAAXA,OAAoB,EAASA,EAAOmB,cACjEX,EAAQR,OAAOoB,YAAcpB,EAAOmB,YAItC,aAAavB,KAAKC,IAAIY,IADL,uDACmBD","file":"static/js/11.ab0e4e5f.chunk.js","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { setPaginationParams } from \"../../../helpers\";\nexport class LCDQueryClient {\n  constructor({\n    requestClient\n  }) {\n    _defineProperty(this, \"req\", void 0);\n\n    this.req = requestClient;\n    this.pools = this.pools.bind(this);\n    this.params = this.params.bind(this);\n    this.liquidityDepthsForRange = this.liquidityDepthsForRange.bind(this);\n    this.userPositions = this.userPositions.bind(this);\n    this.totalLiquidityForRange = this.totalLiquidityForRange.bind(this);\n    this.claimableFees = this.claimableFees.bind(this);\n    this.positionById = this.positionById.bind(this);\n  }\n  /* Pools returns all concentrated liquidity pools */\n\n\n  async pools(params = {\n    pagination: undefined\n  }) {\n    const options = {\n      params: {}\n    };\n\n    if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== \"undefined\") {\n      setPaginationParams(options, params.pagination);\n    }\n\n    const endpoint = `osmosis/concentratedliquidity/v1beta1/pools`;\n    return await this.req.get(endpoint, options);\n  }\n  /* Params returns concentrated liquidity module params. */\n\n\n  async params(_params = {}) {\n    const endpoint = `osmosis/concentratedliquidity/v1beta1/params`;\n    return await this.req.get(endpoint);\n  }\n  /* LiquidityDepthsForRange returns Liqiudity Depths for given range */\n\n\n  async liquidityDepthsForRange(params) {\n    const options = {\n      params: {}\n    };\n\n    if (typeof (params === null || params === void 0 ? void 0 : params.poolId) !== \"undefined\") {\n      options.params.pool_id = params.poolId;\n    }\n\n    if (typeof (params === null || params === void 0 ? void 0 : params.lowerTick) !== \"undefined\") {\n      options.params.lower_tick = params.lowerTick;\n    }\n\n    if (typeof (params === null || params === void 0 ? void 0 : params.upperTick) !== \"undefined\") {\n      options.params.upper_tick = params.upperTick;\n    }\n\n    const endpoint = `osmosis/concentratedliquidity/v1beta1/liquidity_depths_for_range`;\n    return await this.req.get(endpoint, options);\n  }\n  /* UserPositions returns all concentrated postitions of some address. */\n\n\n  async userPositions(params) {\n    const options = {\n      params: {}\n    };\n\n    if (typeof (params === null || params === void 0 ? void 0 : params.poolId) !== \"undefined\") {\n      options.params.pool_id = params.poolId;\n    }\n\n    const endpoint = `osmosis/concentratedliquidity/v1beta1/positions/${params.address}`;\n    return await this.req.get(endpoint, options);\n  }\n  /* TotalLiquidityForRange the amount of liquidity existing within given range. */\n\n\n  async totalLiquidityForRange(params) {\n    const options = {\n      params: {}\n    };\n\n    if (typeof (params === null || params === void 0 ? void 0 : params.poolId) !== \"undefined\") {\n      options.params.pool_id = params.poolId;\n    }\n\n    const endpoint = `osmosis/concentratedliquidity/v1beta1/total_liquidity_for_range`;\n    return await this.req.get(endpoint, options);\n  }\n  /* ClaimableFees returns the amount of fees that can be claimed by a position\n   with the given id. */\n\n\n  async claimableFees(params) {\n    const options = {\n      params: {}\n    };\n\n    if (typeof (params === null || params === void 0 ? void 0 : params.positionId) !== \"undefined\") {\n      options.params.position_id = params.positionId;\n    }\n\n    const endpoint = `osmosis/concentratedliquidity/v1beta1/claimable_fees`;\n    return await this.req.get(endpoint, options);\n  }\n  /* PositionById returns a position with the given id. */\n\n\n  async positionById(params) {\n    const options = {\n      params: {}\n    };\n\n    if (typeof (params === null || params === void 0 ? void 0 : params.positionId) !== \"undefined\") {\n      options.params.position_id = params.positionId;\n    }\n\n    const endpoint = `osmosis/concentratedliquidity/v1beta1/position_by_id`;\n    return await this.req.get(endpoint, options);\n  }\n\n}"],"sourceRoot":""}