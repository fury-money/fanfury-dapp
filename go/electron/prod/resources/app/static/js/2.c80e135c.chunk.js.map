{"version":3,"sources":["packages/screens/Swap/components/SwapView/CurrencyAmount.tsx","packages/screens/Swap/components/SwapView/SelectedCurrency.tsx","packages/screens/Swap/components/SwapView/SwapDetail.tsx","assets/icons/info.svg","packages/screens/Swap/components/FadeInView.tsx","assets/icons/chevron-circle-down.svg","packages/screens/Swap/components/SwapView/SwapSettings.tsx","packages/screens/Swap/components/SwapView/SelectableCurrency.tsx","packages/screens/Swap/components/SwapView/SwapTokensList.tsx","assets/icons/chevron-circle-up.svg","assets/icons/settings.svg","packages/hooks/useSwap.ts","packages/screens/Swap/components/SwapView/index.tsx"],"names":["CurrencyAmount","_ref","amount","amountUsd","isApproximate","_jsxs","View","children","BrandText","style","textAlign","fontSemibold20","color","neutralA3","parseFloat","toFixed","toString","fontSemibold14","SelectedCurrency","currency","selectedNetworkId","setRef","_useDropdowns","useDropdowns","onPressDropdownButton","isDropdownOpen","currencyNetwork","useMemo","allNetworks","filter","networkInfo","kind","NetworkKind","Cosmos","find","stakeCurrency","denom","ref","useRef","useEffect","current","_jsx","TouchableOpacity","onPress","flexDirection","alignItems","CurrencyIcon","icon","size","networkId","marginLeft","layout","padding_x1_5","marginRight","padding_x1","displayName","SVG","source","chevronUpSVG","chevronDownSVG","width","height","secondaryColor","fontSemibold13","_path","SwapDetail","slippage","fee","feeAmountOutUsd","expectedAmountOut","spotPrice","tokenNameIn","tokenNameOut","amountIn","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","Pressable","TertiaryBox","fullWidth","mainContainerStyle","padding","padding_x2","styles","row","_Fragment","SpacerColumn","rowLabel","rowValue","Separator","StyleSheet","create","justifyContent","_objectSpread","flatten","neutral77","_extends","Object","assign","bind","target","i","arguments","length","key","prototype","hasOwnProperty","call","apply","this","props","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","_rect","_rect2","FadeInView","fadeAnim","Animated","Value","timing","toValue","duration","useNativeDriver","start","opacity","SelectableItem","isSelected","borderRadius","backgroundColor","primaryColor","SwapSettings","_ref2","settingsOpened","setSlippageValue","infoVisible","setInfoVisible","_useState3","_useState4","manualSlippage","setManualSlippage","_useState5","value","_useState6","slippageItems","setSlippageItems","_useState7","_useState8","manualSlippageSelected","setManualSlippageSelected","_useState9","_useState10","inputRef","setInputRef","selectManualSlippage","newItems","forEach","sItem","push","position","right","top","padding_x2_5","noBrokenCorners","fontSemibold16","marginTop","marginBottom","CustomPressable","onHoverIn","onHoverOut","infoSVG","padding_x0_5","map","item","index","_inputRef$current","blur","onPressSlippageItem","primaryTextColor","_inputRef$current2","focus","TextInputCustom","label","name","variant","textInputStyle","onChangeText","isFloatText","onChangeManualSlippage","maxLength","placeholder","left","SelectableCurrency","onPressItem","selectedWallet","useSelectedWallet","balances","useBalances","address","currencyBalance","bal","currencyNative","getNativeCurrency","currencyAmount","Decimal","fromAtomics","decimals","toFloatApproximation","alignSelf","usdAmount","SwapTokensList","isOpened","close","currencies","setCurrency","modalContainer","containerStyle","currencyInfo","x","y","rx","_path2","transform","amountToCurrencyMicro","multiplier","_getNativeCurrency","Math","round","lcdPoolPretty","lcdPool","prices","poolAssets","asset","token","makeLcdPoolPretty","SwapHeader","setSettingsOpened","networkDisplayName","headerContainer","headerLogoTitle","osmosisLogo","headerTitle","settingsSVG","SwapView","translateToTop","translateToBottom","viewWidth","setViewWidth","translateRangeToTop","interpolate","inputRange","outputRange","translateRangeToBottom","useSelectedNetworkId","selectedNetwork","useSelectedNetworkInfo","_useFeedbacks","useFeedbacks","setToastError","setToastSuccess","cosmosNetwork","id","teritoriNetwork","atomCurrency","toriCurrency","_getNativeCurrency2","setCurrencyIn","setCurrencyOut","currencyIn","currencyOut","currencyInNative","currencyOutNative","selectableCurrencies","deprecated","currencyInBalance","currencyInAmount","setAmountIn","useCoingeckoPrices","amountInUsd","coingeckoId","usd","_useState11","_useState12","setSlippage","closeOpenedDropdown","_useState13","_useState14","dropdownOutRef","setDropdownOutRef","_useState15","_useState16","dropdownInRef","setDropdownInRef","onPressSwap","_asyncToGenerator","swapResult","swap","amountOut","isError","title","message","_useSwap","_multihopPools$","_multihopPools$2","getCosmosNetwork","isMultihop","setIsMultihop","directPool","setDirectPool","multihopPools","setMultihopPools","loading","setLoading","api","OsmosisApiClient","url","restEndpoint","lcdPools","useQuery","pools","getPools","data","cleanedLcdPools","pool","pool_assets","total_weight","totalWeight","pool_params","poolParams","swap_fee","swapFee","firstAssetsExists","lastAssetsExists","osmosisAssets","base","bestDirectPool","cheapestFeePoolIn","cheapestFeePoolOut","poolsIn","poolsOut","prettyPool","liquidity","lcdPoolIn","_lcdPoolIn$poolAssets","lcdPoolOut","_lcdPoolOut$poolAsset","_cheapestFeePoolIn","_cheapestFeePoolOut","multiHopFee","directPoolFee","createRPCQueryClient","osmosis","ClientFactory","clientRPC","rpcEndpoint","firstRequestSpotPrice","lastRequestSpotPrice","_lcdPool$poolAssets$f","_lcdPool$poolAssets$f2","poolId","Long","fromString","quoteAssetDenom","baseAssetDenom","firstResponseSpotPrice","gamm","v1beta1","lastResponseSpotPrice","requestSpotPrice","responseSpotPrice","_ref3","amountInMicro","amountOutMicro","swapExactAmountIn","MessageComposer","withTypeUrl","signer","getKeplrSigner","client","getSigningOsmosisClient","routes","tokenOutDenom","amountOutMicroWithSlippage","calculateAmountWithSlippage","msg","sender","tokenIn","tokenOutMinAmount","stdFee","coins","gas","txResponse","signAndBroadcast","isDeliverTxFailure","console","error","rawLog","e","Error","_x","_x2","_x3","useSwap","amountOutWithFee","amountOutUsdWithFee","maxWidth","onLayout","nativeEvent","paddingHorizontal","SeparatorGradient","childrenContainer","currencyBoxMainContainer","counts","availableAmount","SecondaryButton","text","touchableStyle","translateY","TextInput","inputAmount","placeholderTextColor","sequence","setTimeout","invertButton","hovered","chevronCircleDown","chevronCircleUp","PrimaryButton","loader","disabled","loaderContainer","loaderBackground","neutral00","flex","paddingBottom","zIndex","outlineStyle"],"mappings":"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","file":"static/js/2.c80e135c.chunk.js","sourcesContent":["import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { BrandText } from \"../../../../components/BrandText\";\nimport { neutralA3 } from \"../../../../utils/style/colors\";\nimport { fontSemibold14, fontSemibold20 } from \"../../../../utils/style/fonts\";\n\nexport const CurrencyAmount: React.FC<{\n  amount: number;\n  amountUsd: number;\n  isApproximate?: boolean;\n}> = ({ amount, amountUsd, isApproximate }) => {\n  return (\n    <View>\n      <BrandText\n        style={[\n          { textAlign: \"right\" },\n          fontSemibold20,\n          (!amount || !isApproximate) && { color: neutralA3 },\n        ]}\n      >\n        {isApproximate && \"≈ \"}\n        {!amount ? \"0\" : parseFloat(amount.toFixed(6)).toString()}\n      </BrandText>\n      <BrandText\n        style={[\n          {\n            color: neutralA3,\n            textAlign: \"right\",\n          },\n          fontSemibold14,\n        ]}\n      >\n        {isApproximate && \"≈ \"} ${parseFloat(amountUsd.toFixed(2).toString())}\n      </BrandText>\n    </View>\n  );\n};\n","import React, {\n  Dispatch,\n  RefObject,\n  SetStateAction,\n  useEffect,\n  useMemo,\n  useRef,\n} from \"react\";\nimport { TouchableOpacity, View } from \"react-native\";\n\nimport chevronDownSVG from \"../../../../../assets/icons/chevron-down.svg\";\nimport chevronUpSVG from \"../../../../../assets/icons/chevron-up.svg\";\nimport { BrandText } from \"../../../../components/BrandText\";\nimport { CurrencyIcon } from \"../../../../components/CurrencyIcon\";\nimport { SVG } from \"../../../../components/SVG\";\nimport { useDropdowns } from \"../../../../context/DropdownsProvider\";\nimport {\n  allNetworks,\n  CosmosNetworkInfo,\n  NativeCurrencyInfo,\n  NetworkKind,\n} from \"../../../../networks\";\nimport { neutralA3, secondaryColor } from \"../../../../utils/style/colors\";\nimport { fontSemibold13 } from \"../../../../utils/style/fonts\";\nimport { layout } from \"../../../../utils/style/layout\";\n\nexport const SelectedCurrency: React.FC<{\n  currency?: NativeCurrencyInfo;\n  selectedNetworkId: string;\n  setRef: Dispatch<SetStateAction<RefObject<any> | null>>;\n}> = ({ currency, selectedNetworkId, setRef }) => {\n  const { onPressDropdownButton, isDropdownOpen } = useDropdowns();\n  const currencyNetwork: CosmosNetworkInfo | undefined = useMemo(() => {\n    const cosmosNetworks = allNetworks.filter(\n      (networkInfo) => networkInfo.kind === NetworkKind.Cosmos\n    ) as CosmosNetworkInfo[];\n    return cosmosNetworks.find(\n      (networkInfo) => networkInfo.stakeCurrency === currency?.denom\n    );\n  }, [currency?.denom]);\n\n  // Passing ref to parent\n  const ref = useRef<View>(null);\n  useEffect(() => {\n    if (ref.current) {\n      setRef(ref);\n    }\n  }, [setRef]);\n\n  return (\n    <View ref={ref}>\n      <TouchableOpacity\n        onPress={() => onPressDropdownButton(ref)}\n        style={{\n          flexDirection: \"row\",\n          alignItems: \"center\",\n        }}\n      >\n        <CurrencyIcon\n          icon={currency?.icon}\n          size={48}\n          denom={currency?.denom || \"\"}\n          networkId={selectedNetworkId}\n        />\n        <View style={{ marginLeft: layout.padding_x1_5 }}>\n          <View\n            style={{\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            }}\n          >\n            <BrandText style={{ marginRight: layout.padding_x1 }}>\n              {currency?.displayName}\n            </BrandText>\n            <SVG\n              source={isDropdownOpen(ref) ? chevronUpSVG : chevronDownSVG}\n              width={16}\n              height={16}\n              color={secondaryColor}\n            />\n          </View>\n          <BrandText style={[fontSemibold13, { color: neutralA3 }]}>\n            {currencyNetwork?.displayName}\n          </BrandText>\n        </View>\n      </TouchableOpacity>\n    </View>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Pressable, StyleSheet, View } from \"react-native\";\n\nimport chevronDownSVG from \"../../../../../assets/icons/chevron-down.svg\";\nimport chevronUpSVG from \"../../../../../assets/icons/chevron-up.svg\";\nimport { BrandText } from \"../../../../components/BrandText\";\nimport { SVG } from \"../../../../components/SVG\";\nimport { Separator } from \"../../../../components/Separator\";\nimport { TertiaryBox } from \"../../../../components/boxes/TertiaryBox\";\nimport { SpacerColumn } from \"../../../../components/spacer\";\nimport {\n  neutral77,\n  neutralA3,\n  secondaryColor,\n} from \"../../../../utils/style/colors\";\nimport { fontSemibold14 } from \"../../../../utils/style/fonts\";\nimport { layout } from \"../../../../utils/style/layout\";\n\nexport const SwapDetail: React.FC<{\n  slippage: number;\n  fee: number;\n  feeAmountOutUsd: number;\n  expectedAmountOut: number;\n  spotPrice: string;\n  tokenNameIn: string;\n  tokenNameOut: string;\n  amountIn?: string;\n}> = ({\n  slippage,\n  fee,\n  feeAmountOutUsd,\n  expectedAmountOut,\n  spotPrice,\n  tokenNameIn,\n  tokenNameOut,\n  amountIn,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    if (!amountIn) setIsOpen(false);\n  }, [amountIn]);\n\n  return (\n    <Pressable\n      onPress={() => setIsOpen((isOpen) => !isOpen && !!amountIn)}\n      style={{ width: \"100%\" }}\n    >\n      <TertiaryBox\n        fullWidth\n        mainContainerStyle={{ padding: layout.padding_x2 }}\n      >\n        <View style={styles.row}>\n          <BrandText\n            style={[fontSemibold14, !amountIn && { color: neutralA3 }]}\n          >\n            1 {tokenNameIn + \" \"}≈{\" \"}\n            {spotPrice === \"0\" || !spotPrice\n              ? \"0\"\n              : parseFloat(spotPrice).toFixed(6)}\n            {\" \" + tokenNameOut}\n          </BrandText>\n\n          {!!amountIn && (\n            <SVG\n              source={isOpen ? chevronUpSVG : chevronDownSVG}\n              width={16}\n              height={16}\n              color={secondaryColor}\n            />\n          )}\n        </View>\n\n        {isOpen && (\n          <>\n            <SpacerColumn size={2.5} />\n\n            {/*TODO: Handle Price impact*/}\n            {/*<View style={styles.row}>*/}\n            {/*  <BrandText style={styles.rowLabel}>Price Impact</BrandText>*/}\n            {/*  <BrandText style={styles.rowValue}>-???%</BrandText>*/}\n            {/*</View>*/}\n\n            <SpacerColumn size={1} />\n\n            <View style={styles.row}>\n              <BrandText style={styles.rowLabel}>\n                Swap Fee ({(fee * 100).toFixed(2)}%)\n              </BrandText>\n              <BrandText style={styles.rowValue}>\n                ≈{\" \"}\n                {feeAmountOutUsd < 0.01\n                  ? \"< $0.01\"\n                  : `$${feeAmountOutUsd.toFixed(2)}`}\n              </BrandText>\n            </View>\n\n            <SpacerColumn size={2} />\n            <Separator />\n            <SpacerColumn size={2} />\n\n            <View style={styles.row}>\n              <BrandText style={styles.rowLabel}>Expected Output</BrandText>\n              <BrandText style={styles.rowValue}>\n                ≈ {`${expectedAmountOut.toFixed(6)} ${tokenNameOut}`}\n              </BrandText>\n            </View>\n\n            <SpacerColumn size={1} />\n\n            <View style={styles.row}>\n              <BrandText style={styles.rowLabel}>\n                Min received after slippage ({slippage}%)\n              </BrandText>\n              <BrandText style={styles.rowValue}>\n                ≈{\" \"}\n                {`${(\n                  expectedAmountOut -\n                  (expectedAmountOut * slippage) / 100\n                ).toFixed(6)} ${tokenNameOut}`}\n              </BrandText>\n            </View>\n          </>\n        )}\n      </TertiaryBox>\n    </Pressable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    width: \"100%\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  rowLabel: {\n    ...StyleSheet.flatten(fontSemibold14),\n    color: neutral77,\n  },\n  rowValue: {\n    ...StyleSheet.flatten(fontSemibold14),\n  },\n});\n","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgInfo(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.999 14.665a6.667 6.667 0 100-13.333 6.667 6.667 0 000 13.333zM8 10.667V8M8 5.332h.008\",\n    stroke: \"#777\",\n    strokeWidth: 1.25,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nexport default SvgInfo;","import React, { PropsWithChildren, useEffect, useRef } from \"react\";\nimport { Animated, ViewStyle } from \"react-native\";\n\ntype FadeInViewProps = PropsWithChildren<{ style: ViewStyle }>;\nexport const FadeInView: React.FC<FadeInViewProps> = (props) => {\n  const fadeAnim = useRef(new Animated.Value(0)).current; // Initial value for opacity: 0\n\n  useEffect(() => {\n    Animated.timing(fadeAnim, {\n      toValue: 1,\n      duration: 400,\n      useNativeDriver: true,\n    }).start();\n  }, [fadeAnim]);\n\n  return (\n    <Animated.View // Special animatable View\n      style={{\n        ...props.style,\n        opacity: fadeAnim, // Bind opacity to animated value\n      }}\n    >\n      {props.children}\n    </Animated.View>\n  );\n};\n","var _rect, _path, _rect2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgChevronCircleDown(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 32,\n    height: 32,\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, props), _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 0.5,\n    y: 0.5,\n    width: 31,\n    height: 31,\n    rx: 15.5,\n    fill: \"#333\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 14l4 4 4-4\",\n    stroke: \"#16BBFF\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 0.5,\n    y: 0.5,\n    width: 31,\n    height: 31,\n    rx: 15.5,\n    stroke: \"#444\"\n  })));\n}\nexport default SvgChevronCircleDown;","import React, {\n  Dispatch,\n  RefObject,\n  SetStateAction,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Pressable, View } from \"react-native\";\n\nimport infoSVG from \"../../../../../assets/icons/info.svg\";\nimport { BrandText } from \"../../../../components/BrandText\";\nimport { SVG } from \"../../../../components/SVG\";\nimport { TertiaryBox } from \"../../../../components/boxes/TertiaryBox\";\nimport { CustomPressable } from \"../../../../components/buttons/CustomPressable\";\nimport { TextInputCustom } from \"../../../../components/inputs/TextInputCustom\";\nimport {\n  neutral77,\n  neutralA3,\n  primaryColor,\n  primaryTextColor,\n  secondaryColor,\n} from \"../../../../utils/style/colors\";\nimport { fontSemibold14, fontSemibold16 } from \"../../../../utils/style/fonts\";\nimport { layout } from \"../../../../utils/style/layout\";\nimport { isFloatText } from \"../../../../utils/text\";\nimport { FadeInView } from \"../FadeInView\";\n\ntype SlippageItem = {\n  value: number;\n  isSelected?: boolean;\n};\n\nconst SelectableItem: React.FC<{\n  item?: SlippageItem;\n  onPress: () => void;\n  isSelected?: boolean;\n}> = ({ onPress, isSelected, children }) => {\n  return (\n    <Pressable\n      style={[\n        {\n          padding: layout.padding_x1,\n          flexDirection: \"row\",\n          borderRadius: 7,\n          height: 32,\n          width: 64,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        },\n        isSelected && { backgroundColor: primaryColor },\n      ]}\n      onPress={onPress}\n    >\n      {children}\n    </Pressable>\n  );\n};\n\nexport const SwapSettings: React.FC<{\n  setSlippageValue: Dispatch<SetStateAction<number>>;\n  settingsOpened?: boolean;\n}> = ({ settingsOpened, setSlippageValue }) => {\n  const [infoVisible, setInfoVisible] = useState(false);\n  const [manualSlippage, setManualSlippage] = useState(\"\");\n  const [slippageItems, setSlippageItems] = useState([\n    { value: 1, isSelected: true },\n    { value: 3 },\n    { value: 5 },\n  ]);\n  const [manualSlippageSelected, setManualSlippageSelected] = useState(false);\n  const [inputRef, setInputRef] = useState<RefObject<any> | null>(null);\n\n  const onChangeManualSlippage = (value: string) => {\n    if (!value) {\n      setManualSlippage(\"\");\n      return;\n    }\n    if (isFloatText(value)) setManualSlippage(value);\n  };\n\n  const selectManualSlippage = () => {\n    const newItems: SlippageItem[] = [];\n    slippageItems.forEach((sItem) => {\n      sItem.isSelected = false;\n      newItems.push(sItem);\n    });\n    setManualSlippageSelected(true);\n    setSlippageItems(newItems);\n    setSlippageValue(parseFloat(manualSlippage));\n  };\n\n  const onPressSlippageItem = (item: SlippageItem) => {\n    inputRef?.current?.blur();\n    const newItems: SlippageItem[] = [];\n    slippageItems.forEach((sItem) => {\n      sItem.isSelected = false;\n      if (sItem === item) {\n        item.isSelected = true;\n        setSlippageValue(item.value);\n      }\n      newItems.push(sItem);\n    });\n    setManualSlippageSelected(false);\n    setSlippageItems(newItems);\n  };\n\n  const onFocusManualSlippage = () => {\n    inputRef?.current?.focus();\n    if (!manualSlippage || manualSlippageSelected) return;\n    selectManualSlippage();\n  };\n\n  useEffect(() => {\n    if (!manualSlippage) {\n      setManualSlippageSelected(false);\n      setSlippageItems([\n        { value: 1, isSelected: true },\n        { value: 3 },\n        { value: 5 },\n      ]);\n      setSlippageValue(1);\n      return;\n    }\n    selectManualSlippage();\n    // We ignore deps, because of infinite rerender if we put selectManualSlippage and setSlippageValue in deps\n  }, [manualSlippage]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (settingsOpened)\n    return (\n      <FadeInView style={{ position: \"absolute\", right: 20, top: 55 }}>\n        <TertiaryBox\n          mainContainerStyle={{\n            padding: layout.padding_x2_5,\n            alignItems: \"flex-start\",\n          }}\n          width={306}\n          noBrokenCorners\n        >\n          <BrandText style={fontSemibold16}>Transaction Settings</BrandText>\n\n          <View\n            style={{\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              marginTop: layout.padding_x1,\n              marginBottom: layout.padding_x2,\n            }}\n          >\n            <BrandText\n              style={[\n                { marginRight: layout.padding_x1, color: neutral77 },\n                fontSemibold14,\n              ]}\n            >\n              Slippage tolerance\n            </BrandText>\n            <CustomPressable\n              onHoverIn={() => setInfoVisible(true)}\n              onHoverOut={() => setInfoVisible(false)}\n            >\n              <SVG source={infoSVG} width={16} height={16} />\n            </CustomPressable>\n          </View>\n\n          <TertiaryBox\n            mainContainerStyle={{\n              padding: layout.padding_x0_5,\n              flexDirection: \"row\",\n            }}\n            fullWidth\n            noBrokenCorners\n          >\n            {slippageItems.map((item, index) => (\n              <SelectableItem\n                key={index}\n                item={item}\n                onPress={() => onPressSlippageItem(item)}\n                isSelected={item.isSelected}\n              >\n                <BrandText\n                  style={[\n                    fontSemibold14,\n                    item.isSelected && { color: primaryTextColor },\n                  ]}\n                >\n                  {item.value}%\n                </BrandText>\n              </SelectableItem>\n            ))}\n\n            <SelectableItem\n              onPress={onFocusManualSlippage}\n              isSelected={manualSlippageSelected}\n            >\n              <TextInputCustom\n                setRef={setInputRef}\n                label=\"\"\n                name=\"\"\n                variant=\"noStyle\"\n                textInputStyle={[\n                  {\n                    textAlign: \"center\",\n                    height: \"100%\",\n                    width: manualSlippage ? manualSlippage.length * 9 : 20,\n                    color: manualSlippageSelected\n                      ? primaryTextColor\n                      : secondaryColor,\n                  },\n                  fontSemibold14,\n                ]}\n                onChangeText={(value: string) => onChangeManualSlippage(value)}\n                value={manualSlippage}\n                maxLength={5}\n                placeholder=\"2.5\"\n              />\n              <BrandText\n                style={[\n                  fontSemibold14,\n                  {\n                    color: manualSlippageSelected\n                      ? primaryTextColor\n                      : manualSlippage\n                      ? secondaryColor\n                      : neutralA3,\n                  },\n                ]}\n              >\n                %\n              </BrandText>\n            </SelectableItem>\n          </TertiaryBox>\n\n          {/*====== Info box */}\n          {infoVisible && (\n            <TertiaryBox\n              mainContainerStyle={{ padding: layout.padding_x2 }}\n              style={{ position: \"absolute\", left: -36, top: -26 }}\n              noBrokenCorners\n            >\n              <BrandText style={fontSemibold14}>\n                Your transaction will revert if the price changes {\"\\n\"}\n                unfavorably by more than this percentage.\n              </BrandText>\n            </TertiaryBox>\n          )}\n        </TertiaryBox>\n      </FadeInView>\n    );\n  return <></>;\n};\n","import { Decimal } from \"@cosmjs/math\";\nimport React, { useMemo } from \"react\";\nimport { TouchableOpacity, View } from \"react-native\";\n\nimport { CurrencyAmount } from \"./CurrencyAmount\";\nimport { BrandText } from \"../../../../components/BrandText\";\nimport { CurrencyIcon } from \"../../../../components/CurrencyIcon\";\nimport { Separator } from \"../../../../components/Separator\";\nimport { SpacerColumn } from \"../../../../components/spacer\";\nimport { useBalances } from \"../../../../hooks/useBalances\";\nimport useSelectedWallet from \"../../../../hooks/useSelectedWallet\";\nimport {\n  allNetworks,\n  CosmosNetworkInfo,\n  CurrencyInfo,\n  getNativeCurrency,\n  NativeCurrencyInfo,\n  NetworkKind,\n} from \"../../../../networks\";\nimport { Balance } from \"../../../../utils/coins\";\nimport { neutralA3 } from \"../../../../utils/style/colors\";\nimport { fontSemibold13 } from \"../../../../utils/style/fonts\";\nimport { layout } from \"../../../../utils/style/layout\";\n\nexport const SelectableCurrency: React.FC<{\n  onPressItem: () => void;\n  currency: CurrencyInfo;\n  networkId: string;\n}> = ({ onPressItem, currency, networkId }) => {\n  const selectedWallet = useSelectedWallet();\n  const balances = useBalances(networkId, selectedWallet?.address);\n\n  const currencyBalance: Balance | undefined = useMemo(\n    () => balances.find((bal) => bal.denom === currency?.denom),\n    [currency?.denom, balances]\n  );\n\n  const currencyNative: NativeCurrencyInfo | undefined = useMemo(\n    () => getNativeCurrency(networkId, currency?.denom),\n    [currency?.denom, networkId]\n  );\n  const currencyNetwork: CosmosNetworkInfo | undefined = useMemo(() => {\n    const cosmosNetworks = allNetworks.filter(\n      (networkInfo) => networkInfo.kind === NetworkKind.Cosmos\n    ) as CosmosNetworkInfo[];\n    return cosmosNetworks.find(\n      (networkInfo) => networkInfo.stakeCurrency === currencyNative?.denom\n    );\n  }, [currencyNative?.denom]);\n\n  const currencyAmount: number = useMemo(() => {\n    if (!currencyNative || !currencyBalance) return 0;\n    return Decimal.fromAtomics(\n      currencyBalance.amount,\n      currencyNative.decimals\n    ).toFloatApproximation();\n  }, [currencyBalance, currencyNative]);\n\n  return (\n    <>\n      <SpacerColumn size={1} />\n      <Separator />\n      <SpacerColumn size={1} />\n      <TouchableOpacity\n        onPress={onPressItem}\n        style={{\n          alignSelf: \"flex-start\",\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          width: \"100%\",\n        }}\n      >\n        <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\n          <CurrencyIcon\n            size={48}\n            denom={currency.denom}\n            networkId={networkId}\n          />\n          <View style={{ marginLeft: layout.padding_x1_5 }}>\n            <BrandText>{currencyNative?.displayName}</BrandText>\n            <BrandText style={[fontSemibold13, { color: neutralA3 }]}>\n              {currencyNetwork?.displayName}\n            </BrandText>\n          </View>\n        </View>\n\n        <CurrencyAmount\n          amount={currencyAmount}\n          amountUsd={currencyBalance?.usdAmount || 0}\n        />\n      </TouchableOpacity>\n    </>\n  );\n};\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nimport { SelectableCurrency } from \"./SelectableCurrency\";\nimport chevronUpSVG from \"../../../../../assets/icons/chevron-up.svg\";\nimport { SVG } from \"../../../../components/SVG\";\nimport { TertiaryBox } from \"../../../../components/boxes/TertiaryBox\";\nimport { CurrencyInfo } from \"../../../../networks\";\nimport { layout } from \"../../../../utils/style/layout\";\nimport { FadeInView } from \"../FadeInView\";\nexport const SwapTokensList: React.FC<{\n  isOpened: boolean;\n  close: () => void;\n  width: number;\n  currencies?: CurrencyInfo[];\n  selectedNetworkId: string;\n  setCurrency: Dispatch<SetStateAction<CurrencyInfo | undefined>>;\n}> = ({\n  isOpened,\n  close,\n  width,\n  currencies,\n  selectedNetworkId,\n  setCurrency,\n}) => {\n  if (isOpened)\n    return (\n      <View style={styles.modalContainer}>\n        <FadeInView style={{ position: \"absolute\", left: 20, top: 50 }}>\n          <TertiaryBox\n            mainContainerStyle={{\n              padding: layout.padding_x2_5,\n              alignItems: \"flex-start\",\n            }}\n            width={width - 40}\n            noBrokenCorners\n          >\n            <View\n              style={{\n                flexDirection: \"row\",\n                width: \"100%\",\n                justifyContent: \"flex-end\",\n                marginBottom: layout.padding_x1_5,\n              }}\n            >\n              <TouchableOpacity\n                containerStyle={[{ alignSelf: \"center\" }]}\n                style={{ justifyContent: \"center\" }}\n                onPress={close}\n              >\n                <SVG width={16} height={16} source={chevronUpSVG} />\n              </TouchableOpacity>\n            </View>\n            <View\n              style={{\n                width: \"100%\",\n              }}\n            >\n              {currencies?.map((currencyInfo, index) => (\n                <SelectableCurrency\n                  key={index}\n                  currency={currencyInfo}\n                  networkId={selectedNetworkId}\n                  onPressItem={() => {\n                    setCurrency(currencyInfo);\n                    close();\n                  }}\n                />\n              ))}\n            </View>\n          </TertiaryBox>\n        </FadeInView>\n      </View>\n    );\n  return <></>;\n};\n\nconst styles = StyleSheet.create({\n  modalContainer: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"rgba(0, 0, 0, .8)\",\n    borderRadius: 20,\n  },\n});\n","var _rect, _path, _rect2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgChevronCircleUp(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 32,\n    height: 32,\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, props), _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 31.5,\n    y: 31.5,\n    width: 31,\n    height: 31,\n    rx: 15.5,\n    transform: \"rotate(-180 31.5 31.5)\",\n    fill: \"#333\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20 18l-4-4-4 4\",\n    stroke: \"#16BBFF\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 31.5,\n    y: 31.5,\n    width: 31,\n    height: 31,\n    rx: 15.5,\n    transform: \"rotate(-180 31.5 31.5)\",\n    stroke: \"#444\"\n  })));\n}\nexport default SvgChevronCircleUp;","var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgSettings(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 20,\n    height: 20,\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10 12.5a2.5 2.5 0 100-5 2.5 2.5 0 000 5z\",\n    stroke: \"#777\",\n    strokeWidth: 1.25,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.353 8.664l-.915-2.209 1.23-1.454-1.667-1.666-1.446 1.235-2.255-.927-.52-1.975H9.153l-.526 2-2.204.93-1.42-1.263L3.334 5l1.21 1.491-.9 2.215-1.977.461v1.667l2 .546.93 2.203-1.263 1.417L5 16.668l1.493-1.216 2.171.893.503 1.99h1.667l.503-1.99 2.21-.914c.367.263 1.453 1.237 1.453 1.237l1.667-1.667-1.237-1.458.915-2.21 1.988-.517V9.168l-1.98-.504z\",\n    stroke: \"#777\",\n    strokeWidth: 1.25,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nexport default SvgSettings;","import { coins, isDeliverTxFailure, StdFee } from \"@cosmjs/stargate\";\nimport {\n  calculateAmountWithSlippage,\n  LcdPool,\n  makeLcdPoolPretty,\n  OsmosisApiClient,\n  assets as osmosisAssets,\n} from \"@cosmology/core\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Long from \"long\";\nimport { osmosis, getSigningOsmosisClient } from \"osmojs\";\nimport { QuerySpotPriceRequest } from \"osmojs/src/codegen/osmosis/gamm/v1beta1/query\";\nimport { Coin } from \"osmojs/types/codegen/cosmos/base/v1beta1/coin\";\nimport { MsgSwapExactAmountIn } from \"osmojs/types/codegen/osmosis/gamm/v1beta1/tx\";\nimport { SwapAmountInRoute } from \"osmojs/types/codegen/osmosis/poolmanager/v1beta1/swap_route\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nimport { useSelectedNetworkId } from \"./useSelectedNetwork\";\nimport useSelectedWallet from \"./useSelectedWallet\";\nimport {\n  CurrencyInfo,\n  getCosmosNetwork,\n  getKeplrSigner,\n  getNativeCurrency,\n} from \"../networks\";\n\ninterface PriceHash<T> {\n  [key: string]: T;\n}\ninterface PoolAsset {\n  token: Coin;\n  weight: string;\n}\n\nexport type SwapResult = {\n  title: string;\n  message: string;\n  isError?: boolean;\n};\n\nexport const useSwap = (\n  currencyIn?: CurrencyInfo,\n  currencyOut?: CurrencyInfo\n) => {\n  const selectedWallet = useSelectedWallet();\n  const selectedNetworkId = useSelectedNetworkId();\n  const selectedNetwork = getCosmosNetwork(selectedNetworkId);\n  const [isMultihop, setIsMultihop] = useState(false);\n  const [directPool, setDirectPool] = useState<LcdPool>();\n  // Only 2 pools handled for now\n  const [multihopPools, setMultihopPools] = useState<LcdPool[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  // ===== Creating Osmosis client for API use\n  const api = new OsmosisApiClient({\n    url: selectedNetwork?.restEndpoint,\n  });\n\n  const { data: lcdPools } = useQuery([\"lcdPools\"], async () => {\n    setLoading(true);\n    const pools = await api.getPools();\n    setLoading(false);\n    return pools;\n  });\n\n  useEffect(() => {\n    if (!lcdPools) {\n      // TODO: ? SERVICE UNAVAILABLE\n    }\n  }, [lcdPools]);\n\n  // ===== Pools format used to find FEE\n  const cleanedLcdPools = useMemo(() => {\n    const pools: LcdPool[] = [];\n    lcdPools?.pools.forEach((pool) => {\n      // @ts-expect-error FIXME: We get LcdPool with properties with underscore. Prevent errors in makeLcdPoolPretty\n      if (pool.pool_assets) pool.poolAssets = pool.pool_assets;\n      // @ts-expect-error\n      if (pool.total_weight) pool.totalWeight = pool.total_weight;\n      // @ts-expect-error\n      if (pool.pool_params) pool.poolParams = pool.pool_params;\n      // @ts-expect-error\n      if (pool.pool_params.swap_fee)\n        // @ts-expect-error\n        pool.poolParams.swapFee = pool.pool_params.swap_fee;\n      //TODO: Get \"/osmosis.gamm.v1beta1.Pool\" from libs\n      if (pool[\"@type\"] !== \"/osmosis.gamm.v1beta1.Pool\") return;\n      //TODO: Only pools with 2 assets ?\n      if (!pool.poolAssets || pool.poolAssets.length !== 2) return;\n\n      // TODO: Don't want pools with unknown asset ?\n      let firstAssetsExists = false;\n      let lastAssetsExists = false;\n      osmosisAssets.forEach((asset: any) => {\n        if (asset.base === pool.poolAssets[0].token.denom) {\n          firstAssetsExists = true;\n        }\n        if (asset.base === pool.poolAssets[1].token.denom) {\n          lastAssetsExists = true;\n        }\n      });\n      if (!firstAssetsExists || !lastAssetsExists) return;\n\n      pools.push(pool);\n    });\n    return pools;\n  }, [lcdPools?.pools]);\n\n  // ===== Searching for pools to use (routes)\n  useEffect(() => {\n    if (!currencyIn?.denom || !currencyOut?.denom || !cleanedLcdPools) return;\n\n    const poolsIn: LcdPool[] = [];\n    const poolsOut: LcdPool[] = [];\n    let bestDirectPool: LcdPool | undefined;\n    let cheapestFeePoolIn: LcdPool | undefined;\n    let cheapestFeePoolOut: LcdPool | undefined;\n\n    // ===== Finding the best pool that includes out two currencies.\n    // And many pools to be the IN or the OUT of the multihop\n    cleanedLcdPools.forEach((lcdPool) => {\n      lcdPool.poolAssets.forEach((asset: PoolAsset) => {\n        // We find pools that includes the two currencies to be used for multihop\n        if (asset.token.denom === currencyIn.denom) {\n          poolsIn.push(lcdPool);\n        }\n        if (asset.token.denom === currencyOut.denom) {\n          poolsOut.push(lcdPool);\n        }\n      });\n      const prettyPool = lcdPoolPretty(lcdPool);\n\n      // We stock the pool that includes the two currencies and has the higher liquidity\n      //TODO: Better tests for that\n      if (\n        ((lcdPool.poolAssets[0].token.denom === currencyIn.denom &&\n          lcdPool.poolAssets[1].token.denom === currencyOut.denom) ||\n          (lcdPool.poolAssets[1].token.denom === currencyIn.denom &&\n            lcdPool.poolAssets[0].token.denom === currencyOut.denom)) &&\n        (!bestDirectPool ||\n          parseFloat(prettyPool.liquidity || \"0\") >\n            parseFloat(lcdPoolPretty(bestDirectPool).liquidity || \"0\"))\n      ) {\n        bestDirectPool = lcdPool;\n      }\n      // else => No pool that includes the two currencies found => Multihop will be used\n    });\n    if (bestDirectPool) {\n      setDirectPool(bestDirectPool);\n    }\n\n    // ===== Finding the cheapest pools to make a multihop swap\n    // ===> Only if no directPool found, for now! TODO: Allow to use multihop if it directPool found but it's less profitable\n    poolsIn.forEach((lcdPoolIn) => {\n      // We want enough OSMO in the pools\n      if (\n        parseFloat(\n          lcdPoolIn.poolAssets.find((asset) => asset.token.denom === \"uosmo\")\n            ?.token.amount || \"1\"\n        ) /\n          1000000 <\n        1\n      )\n        return;\n      // We want enough liquidity is the pools\n      if (parseFloat(lcdPoolPretty(lcdPoolIn).liquidity) < 10000000000) return;\n\n      poolsOut.forEach((lcdPoolOut) => {\n        if (\n          parseFloat(\n            lcdPoolOut.poolAssets.find((asset) => asset.token.denom === \"uosmo\")\n              ?.token.amount || \"1\"\n          ) /\n            1000000 <\n          1\n        )\n          return;\n        if (parseFloat(lcdPoolPretty(lcdPoolOut).liquidity) < 10000000000)\n          return;\n\n        // TODO: Ugly! Fix that (+fee+liquidity tests are weirds)\n        if (\n          ((lcdPoolIn.poolAssets[0].token.denom !== currencyIn.denom &&\n            lcdPoolIn.poolAssets[0].token.denom !== currencyOut.denom &&\n            lcdPoolOut.poolAssets[0].token.denom !== currencyIn.denom &&\n            lcdPoolOut.poolAssets[0].token.denom !== currencyOut.denom &&\n            lcdPoolIn.poolAssets[0].token.denom ===\n              lcdPoolOut.poolAssets[0].token.denom) ||\n            (lcdPoolIn.poolAssets[1].token.denom !== currencyIn.denom &&\n              lcdPoolIn.poolAssets[1].token.denom !== currencyOut.denom &&\n              lcdPoolOut.poolAssets[1].token.denom !== currencyIn.denom &&\n              lcdPoolOut.poolAssets[1].token.denom !== currencyOut.denom &&\n              lcdPoolIn.poolAssets[1].token.denom ===\n                lcdPoolOut.poolAssets[1].token.denom) ||\n            (lcdPoolIn.poolAssets[0].token.denom !== currencyIn.denom &&\n              lcdPoolIn.poolAssets[0].token.denom !== currencyOut.denom &&\n              lcdPoolOut.poolAssets[1].token.denom !== currencyIn.denom &&\n              lcdPoolOut.poolAssets[1].token.denom !== currencyOut.denom &&\n              lcdPoolIn.poolAssets[0].token.denom ===\n                lcdPoolOut.poolAssets[1].token.denom) ||\n            (lcdPoolIn.poolAssets[1].token.denom !== currencyIn.denom &&\n              lcdPoolIn.poolAssets[1].token.denom !== currencyOut.denom &&\n              lcdPoolOut.poolAssets[0].token.denom !== currencyIn.denom &&\n              lcdPoolOut.poolAssets[0].token.denom !== currencyOut.denom &&\n              lcdPoolIn.poolAssets[1].token.denom ===\n                lcdPoolOut.poolAssets[0].token.denom)) &&\n          parseFloat(lcdPoolIn.poolParams.swapFee) <\n            parseFloat(cheapestFeePoolIn?.poolParams.swapFee || \"9999999999\") &&\n          parseFloat(lcdPoolOut.poolParams.swapFee) <\n            parseFloat(cheapestFeePoolOut?.poolParams.swapFee || \"9999999999\")\n        ) {\n          cheapestFeePoolIn = lcdPoolIn;\n          cheapestFeePoolOut = lcdPoolOut;\n        }\n      });\n    });\n\n    if (cheapestFeePoolIn && cheapestFeePoolOut) {\n      setMultihopPools([cheapestFeePoolIn, cheapestFeePoolOut]);\n    }\n  }, [currencyIn?.denom, currencyOut?.denom, cleanedLcdPools]);\n\n  // ===== Getting the cheapest way between directPool and multihopPools\n  useEffect(() => {\n    if (!multihopPools.length && !directPool) return;\n    // Choose the cheapest way if multihop and direct route available\n    if (multihopPools.length && directPool) {\n      const multiHopFee =\n        parseFloat(multihopPools[0].poolParams.swapFee) +\n        parseFloat(multihopPools[1].poolParams.swapFee);\n      const directPoolFee = parseFloat(directPool.poolParams.swapFee);\n      if (multiHopFee > directPoolFee) {\n        setIsMultihop(false);\n      } else {\n        setIsMultihop(true);\n      }\n    }\n    if (multihopPools.length && !directPool) {\n      setIsMultihop(true);\n    }\n    if (!multihopPools.length && directPool) {\n      setIsMultihop(false);\n    }\n  }, [multihopPools, directPool]);\n\n  // ===== Getting fee\n  const fee = useMemo(() => {\n    if (!multihopPools.length && !directPool) return 0;\n    if (isMultihop)\n      return (\n        parseFloat(multihopPools[0].poolParams.swapFee) +\n        parseFloat(multihopPools[1].poolParams.swapFee)\n      );\n    else return parseFloat(directPool?.poolParams.swapFee || \"0\");\n  }, [multihopPools, directPool, isMultihop]);\n\n  // ===== Getting the equivalent in tokenOut of 1 tokenIn\n  const { data: spotPrice } = useQuery(\n    [\n      \"spotPrice\",\n      currencyOut?.denom,\n      currencyIn?.denom,\n      isMultihop,\n      multihopPools[0]?.id,\n      multihopPools[1]?.id,\n      directPool?.id,\n      selectedNetwork?.id,\n    ],\n    async () => {\n      if (\n        !currencyIn ||\n        !currencyOut ||\n        !selectedNetwork ||\n        ((!multihopPools[0] || !multihopPools[1]) && !directPool)\n      )\n        return \"0\";\n\n      setLoading(true);\n\n      const { createRPCQueryClient } = osmosis.ClientFactory;\n      const clientRPC = await createRPCQueryClient({\n        rpcEndpoint: selectedNetwork.rpcEndpoint,\n      });\n\n      // ===== Spot price of the multihopPools\n      if (isMultihop) {\n        // We need 2 spot prices corresponding te the 2 pools used for multihop\n        let firstRequestSpotPrice: QuerySpotPriceRequest | undefined;\n        let lastRequestSpotPrice: QuerySpotPriceRequest | undefined;\n        multihopPools.forEach((lcdPool) => {\n          lcdPool.poolAssets.forEach((asset) => {\n            if (asset.token.denom === currencyIn.denom) {\n              firstRequestSpotPrice = {\n                poolId: Long.fromString(lcdPool.id),\n                // quote asset is the currencyIn\n                quoteAssetDenom: currencyIn.denom,\n                // base asset is the no currencyIn (Certainly OSMO)\n                baseAssetDenom:\n                  lcdPool.poolAssets.find(\n                    (asset) => asset.token.denom !== currencyIn.denom\n                  )?.token.denom || \"\",\n              };\n            }\n            if (asset.token.denom === currencyOut.denom) {\n              lastRequestSpotPrice = {\n                poolId: Long.fromString(lcdPool.id),\n                // quote asset is the no currencyIn (Certainly OSMO)\n                quoteAssetDenom:\n                  lcdPool.poolAssets.find(\n                    (asset) => asset.token.denom !== currencyOut.denom\n                  )?.token.denom || \"\",\n                // base asset is the currencyIn\n                baseAssetDenom: currencyOut.denom,\n              };\n            }\n          });\n        });\n        if (!firstRequestSpotPrice || !lastRequestSpotPrice) return \"0\";\n        const firstResponseSpotPrice =\n          await clientRPC.osmosis.gamm.v1beta1.spotPrice(firstRequestSpotPrice);\n        const lastResponseSpotPrice =\n          await clientRPC.osmosis.gamm.v1beta1.spotPrice(lastRequestSpotPrice);\n\n        setLoading(false);\n\n        return (\n          parseFloat(firstResponseSpotPrice.spotPrice) *\n          parseFloat(lastResponseSpotPrice.spotPrice)\n        ).toString();\n      }\n      // ===== Spot price of the directPool\n      else if (directPool) {\n        const requestSpotPrice = {\n          poolId: Long.fromString(directPool.id),\n          baseAssetDenom: currencyOut.denom,\n          quoteAssetDenom: currencyIn.denom,\n        };\n        const responseSpotPrice =\n          await clientRPC.osmosis.gamm.v1beta1.spotPrice(requestSpotPrice);\n\n        setLoading(false);\n\n        return responseSpotPrice.spotPrice;\n      }\n\n      setLoading(false);\n      return \"0\";\n    }\n  );\n\n  const swap = async (\n    amountIn: number,\n    amountOut: number,\n    slippage: number\n  ) => {\n    if (!currencyIn || !currencyOut || !selectedWallet || !selectedNetwork)\n      return;\n    const amountInMicro = amountToCurrencyMicro(\n      amountIn,\n      selectedNetworkId,\n      currencyIn.denom\n    );\n    const amountOutMicro = amountToCurrencyMicro(\n      amountOut,\n      selectedNetworkId,\n      currencyOut.denom\n    );\n\n    const { swapExactAmountIn } =\n      osmosis.gamm.v1beta1.MessageComposer.withTypeUrl;\n\n    try {\n      // ===== Getting Osmosis client for RPC use\n      const signer = await getKeplrSigner(selectedNetwork.id);\n      const client = await getSigningOsmosisClient({\n        rpcEndpoint: selectedNetwork.rpcEndpoint || \"\",\n        signer,\n      });\n      const routes: SwapAmountInRoute[] = [];\n      if (isMultihop) {\n        if (multihopPools[0].poolAssets[0].token.denom)\n          routes.push({\n            poolId: Long.fromString(multihopPools[0].id),\n            tokenOutDenom: \"uosmo\", // multihopPools must have osmo token as asset\n          } as SwapAmountInRoute);\n\n        routes.push({\n          poolId: Long.fromString(multihopPools[1].id),\n          tokenOutDenom: currencyOut.denom,\n        } as SwapAmountInRoute);\n      } else {\n        //use directPool\n        //only one route\n        routes.push({\n          poolId: Long.fromString(directPool?.id!),\n          tokenOutDenom: currencyOut.denom,\n        });\n      }\n\n      const amountOutMicroWithSlippage = Math.round(\n        parseFloat(calculateAmountWithSlippage(amountOutMicro, slippage))\n      ).toString();\n\n      // ==== Make a trade between two currencies\n      const msgValue: MsgSwapExactAmountIn = {\n        sender: selectedWallet.address || \"\",\n        routes,\n        tokenIn: { denom: currencyIn.denom, amount: amountInMicro } as Coin,\n        tokenOutMinAmount: amountOutMicroWithSlippage,\n      };\n      const msg = swapExactAmountIn(msgValue);\n\n      // We use the fee found in the usedPool\n      const stdFee: StdFee = {\n        amount: coins(Math.round(fee) * 1000000, currencyIn.denom),\n        gas: \"250000\",\n      };\n\n      const txResponse = await client.signAndBroadcast(\n        selectedWallet.address || \"\",\n        [msg],\n        stdFee\n      );\n      if (isDeliverTxFailure(txResponse)) {\n        console.error(\"tx failed\", txResponse);\n        const message = txResponse.rawLog || \"\";\n        return {\n          isError: true,\n          title: \"Transaction failed\",\n          message,\n        } as SwapResult;\n      }\n      return {\n        title: \"Swap succeed\",\n        message: \"\",\n      } as SwapResult;\n    } catch (e) {\n      console.error(\"tx failed\", e);\n      return {\n        isError: true,\n        title: \"Transaction failed\",\n        message: e instanceof Error ? e.message : `${e}`,\n      } as SwapResult;\n    }\n  };\n  return { swap, spotPrice, fee, loading };\n};\n\nexport const amountToCurrencyMicro = (\n  amount: number,\n  networkId: string,\n  denom: string\n) => {\n  let multiplier = 1;\n  for (\n    let i = 0;\n    i < (getNativeCurrency(networkId, denom)?.decimals || 0);\n    i++\n  ) {\n    multiplier = multiplier * 10;\n  }\n  return Math.round(amount * multiplier).toString();\n};\n\n// ===== Pools format used for MsgSwapExactAmountIn, and used to find the highest liquidity\nconst lcdPoolPretty = (lcdPool: LcdPool) => {\n  const prices: PriceHash<any> = {};\n  lcdPool.poolAssets.forEach((asset) => {\n    prices[asset.token.denom] = parseFloat(asset.token.amount);\n  });\n  return makeLcdPoolPretty(prices, lcdPool);\n};\n","import { Decimal } from \"@cosmjs/math\";\nimport React, {\n  Dispatch,\n  RefObject,\n  SetStateAction,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  View,\n  Animated,\n  LayoutChangeEvent,\n} from \"react-native\";\n\nimport { CurrencyAmount } from \"./CurrencyAmount\";\nimport { SelectedCurrency } from \"./SelectedCurrency\";\nimport { SwapDetail } from \"./SwapDetail\";\nimport { SwapSettings } from \"./SwapSettings\";\nimport { SwapTokensList } from \"./SwapTokensList\";\nimport chevronCircleDown from \"../../../../../assets/icons/chevron-circle-down.svg\";\nimport chevronCircleUp from \"../../../../../assets/icons/chevron-circle-up.svg\";\nimport osmosisLogo from \"../../../../../assets/icons/networks/osmosis.svg\";\nimport settingsSVG from \"../../../../../assets/icons/settings.svg\";\nimport { BrandText } from \"../../../../components/BrandText\";\nimport { SVG } from \"../../../../components/SVG\";\nimport { SeparatorGradient } from \"../../../../components/SeparatorGradient\";\nimport { TertiaryBox } from \"../../../../components/boxes/TertiaryBox\";\nimport { CustomPressable } from \"../../../../components/buttons/CustomPressable\";\nimport { PrimaryButton } from \"../../../../components/buttons/PrimaryButton\";\nimport { SecondaryButton } from \"../../../../components/buttons/SecondaryButton\";\nimport { SpacerColumn } from \"../../../../components/spacer\";\nimport { useDropdowns } from \"../../../../context/DropdownsProvider\";\nimport { useFeedbacks } from \"../../../../context/FeedbacksProvider\";\nimport { useBalances } from \"../../../../hooks/useBalances\";\nimport { useCoingeckoPrices } from \"../../../../hooks/useCoingeckoPrices\";\nimport {\n  useSelectedNetworkId,\n  useSelectedNetworkInfo,\n} from \"../../../../hooks/useSelectedNetwork\";\nimport useSelectedWallet from \"../../../../hooks/useSelectedWallet\";\nimport { useSwap } from \"../../../../hooks/useSwap\";\nimport {\n  allNetworks,\n  CosmosNetworkInfo,\n  CurrencyInfo,\n  getNativeCurrency,\n  NativeCurrencyInfo,\n} from \"../../../../networks\";\nimport { Balance } from \"../../../../utils/coins\";\nimport {\n  neutral00,\n  neutral77,\n  neutralA3,\n  primaryColor,\n  secondaryColor,\n} from \"../../../../utils/style/colors\";\nimport { fontSemibold14, fontSemibold20 } from \"../../../../utils/style/fonts\";\nimport { layout } from \"../../../../utils/style/layout\";\nimport { isFloatText } from \"../../../../utils/text\";\n\nconst INVERT_ANIMATION_DURATION = 200;\nconst MAX_WIDTH = 600;\n\nexport const SwapHeader: React.FC<{\n  setSettingsOpened?: Dispatch<SetStateAction<boolean>>;\n  networkDisplayName?: string;\n}> = ({ setSettingsOpened, networkDisplayName }) => {\n  return (\n    <View style={styles.headerContainer}>\n      <View style={styles.headerLogoTitle}>\n        <SVG source={osmosisLogo} height={32} width={32} />\n        <BrandText style={styles.headerTitle}>\n          Swap on {networkDisplayName || \"Osmosis\"}\n        </BrandText>\n      </View>\n      {setSettingsOpened && (\n        <TouchableOpacity\n          onPress={() => setSettingsOpened((isOpened) => !isOpened)}\n        >\n          <SVG source={settingsSVG} height={20} width={20} />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\n/////////////////// SWAP VIEW\nexport const SwapView: React.FC = () => {\n  // ==== Animations, layout\n  const opacity = useRef(new Animated.Value(1)).current;\n  const translateToTop = useRef(new Animated.Value(0)).current;\n  const translateToBottom = useRef(new Animated.Value(0)).current;\n  const [viewWidth, setViewWidth] = useState(0);\n  const opacityFunction = () => {\n    Animated.sequence([\n      Animated.timing(opacity, {\n        toValue: 0,\n        duration: INVERT_ANIMATION_DURATION,\n        useNativeDriver: true,\n      }),\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: INVERT_ANIMATION_DURATION,\n        useNativeDriver: true,\n      }),\n    ]).start();\n  };\n\n  const translateRangeToTop = translateToTop.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, -50],\n  });\n\n  const translateRangeToBottom = translateToBottom.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 50],\n  });\n\n  const toBottomFunction = () => {\n    Animated.sequence([\n      Animated.timing(translateToBottom, {\n        toValue: 1,\n        duration: INVERT_ANIMATION_DURATION,\n        useNativeDriver: true,\n      }),\n      Animated.timing(translateToBottom, {\n        toValue: 0,\n        duration: INVERT_ANIMATION_DURATION,\n        useNativeDriver: true,\n      }),\n    ]).start();\n  };\n\n  const toTopFunction = () => {\n    Animated.sequence([\n      Animated.timing(translateToTop, {\n        toValue: 1,\n        duration: INVERT_ANIMATION_DURATION,\n        useNativeDriver: true,\n      }),\n      Animated.timing(translateToTop, {\n        toValue: 0,\n        duration: INVERT_ANIMATION_DURATION,\n        useNativeDriver: true,\n      }),\n    ]).start();\n  };\n\n  const onLayout = (e: LayoutChangeEvent) => {\n    setViewWidth(e.nativeEvent.layout.width);\n  };\n  // =========\n\n  const selectedWallet = useSelectedWallet();\n  const selectedNetworkId = useSelectedNetworkId();\n  const selectedNetwork = useSelectedNetworkInfo();\n\n  const balances = useBalances(selectedNetworkId, selectedWallet?.address);\n  const { setToastError, setToastSuccess } = useFeedbacks();\n\n  const cosmosNetwork = allNetworks.find(\n    (networkInfo) => networkInfo.id === \"cosmos-hub\"\n  ) as CosmosNetworkInfo;\n  const teritoriNetwork = allNetworks.find(\n    (networkInfo) => networkInfo.id === \"teritori\"\n  ) as CosmosNetworkInfo;\n\n  // ---- Default currencies\n  const atomCurrency = useMemo(\n    () =>\n      selectedNetwork?.currencies.find(\n        (currencyInfo) =>\n          getNativeCurrency(selectedNetworkId, currencyInfo?.denom)?.denom ===\n          cosmosNetwork?.stakeCurrency\n      ),\n    [\n      selectedNetwork?.currencies,\n      cosmosNetwork?.stakeCurrency,\n      selectedNetworkId,\n    ]\n  );\n  const toriCurrency = useMemo(\n    () =>\n      selectedNetwork?.currencies.find(\n        (currencyInfo) =>\n          getNativeCurrency(selectedNetworkId, currencyInfo?.denom)?.denom ===\n          teritoriNetwork?.stakeCurrency\n      ),\n    [\n      selectedNetwork?.currencies,\n      teritoriNetwork?.stakeCurrency,\n      selectedNetworkId,\n    ]\n  );\n\n  useEffect(() => {\n    setCurrencyIn(atomCurrency);\n    setCurrencyOut(toriCurrency);\n  }, [atomCurrency, toriCurrency]);\n\n  // ---- The two current currencies\n  const [currencyIn, setCurrencyIn] = useState<CurrencyInfo | undefined>(\n    atomCurrency\n  );\n  const [currencyOut, setCurrencyOut] = useState<CurrencyInfo | undefined>(\n    toriCurrency\n  );\n  const currencyInNative: NativeCurrencyInfo | undefined = useMemo(\n    () => getNativeCurrency(selectedNetworkId, currencyIn?.denom),\n    [currencyIn?.denom, selectedNetworkId]\n  );\n  const currencyOutNative: NativeCurrencyInfo | undefined = useMemo(\n    () => getNativeCurrency(selectedNetworkId, currencyOut?.denom),\n    [currencyOut?.denom, selectedNetworkId]\n  );\n  // ---- Displayed and selectable currencies\n  const selectableCurrencies = useMemo(\n    () =>\n      selectedNetwork?.currencies.filter(\n        (currencyInfo) =>\n          currencyIn?.denom !== currencyInfo.denom &&\n          currencyOut?.denom !== currencyInfo.denom &&\n          ((currencyInfo.kind === \"ibc\" && !currencyInfo.deprecated) ||\n            currencyInfo.kind === \"native\")\n      ),\n    [currencyIn?.denom, currencyOut?.denom, selectedNetwork?.currencies]\n  );\n  // ---- The user's amount of the first currency\n  const currencyInBalance: Balance | undefined = useMemo(\n    () => balances.find((bal) => bal.denom === currencyIn?.denom),\n    [currencyIn?.denom, balances]\n  );\n  const currencyInAmount: string = useMemo(() => {\n    if (!currencyInNative || !currencyInBalance) return \"0\";\n    return Decimal.fromAtomics(\n      currencyInBalance.amount,\n      currencyInNative.decimals\n    ).toString();\n  }, [currencyInBalance, currencyInNative]);\n  // ---- Current amounts (The user enters amountIn)\n  const [amountIn, setAmountIn] = useState(\"\");\n\n  const { prices } = useCoingeckoPrices([\n    { networkId: selectedNetworkId, denom: currencyIn?.denom },\n    { networkId: selectedNetworkId, denom: currencyOut?.denom },\n  ]);\n  // ---- USD price for the first currency\n  const amountInUsd: number = useMemo(() => {\n    if (\n      !currencyInNative ||\n      !amountIn ||\n      parseFloat(amountIn) === 0 ||\n      !prices[currencyInNative.coingeckoId]\n    )\n      return 0;\n    return parseFloat(amountIn) * prices[currencyInNative.coingeckoId].usd;\n  }, [currencyInNative, amountIn, prices]);\n\n  // ---- Settings\n  const [settingsOpened, setSettingsOpened] = useState(false);\n  const [slippage, setSlippage] = useState(1);\n\n  // ---- Dropdowns\n  const { isDropdownOpen, closeOpenedDropdown } = useDropdowns();\n  const [dropdownOutRef, setDropdownOutRef] = useState<RefObject<any> | null>(\n    null\n  );\n  const [dropdownInRef, setDropdownInRef] = useState<RefObject<any> | null>(\n    null\n  );\n\n  const onChangeAmountIn = (text: string) => {\n    if (!text) {\n      setAmountIn(\"\");\n      return;\n    }\n    if (isFloatText(text)) setAmountIn(text);\n  };\n\n  // ---- Buttons\n  const onPressInvert = () => {\n    opacityFunction();\n    toBottomFunction();\n    toTopFunction();\n    setTimeout(() => {\n      setCurrencyIn(currencyOut);\n      setCurrencyOut(currencyIn);\n      setAmountIn(amountOutWithFee ? amountOutWithFee.toFixed(6) : \"\");\n    }, INVERT_ANIMATION_DURATION);\n  };\n  const onPressHalf = () => {\n    setAmountIn((parseFloat(currencyInAmount) / 2).toString());\n  };\n  const onPressMax = () => {\n    setAmountIn(parseFloat(currencyInAmount).toString());\n  };\n  const onPressSwap = async () => {\n    const swapResult = await swap(parseFloat(amountIn), amountOut, slippage);\n    setSettingsOpened(false);\n\n    if (swapResult?.isError) {\n      setToastError({\n        title: swapResult?.title || \"Error\",\n        message: swapResult?.message || \"Error\",\n      });\n    } else {\n      setToastSuccess({\n        title: swapResult?.title || \"Success\",\n        message: \"\",\n      });\n      setAmountIn(\"\");\n    }\n  };\n\n  // ---- SWAP OSMOSIS\n  const { swap, spotPrice, fee } = useSwap(currencyIn, currencyOut);\n\n  const amountOut: number = useMemo(() => {\n    if (!amountIn || parseFloat(amountIn) === 0 || !spotPrice) return 0;\n    return parseFloat(spotPrice) * parseFloat(amountIn);\n  }, [spotPrice, amountIn]);\n\n  const amountOutWithFee: number = useMemo(\n    () => amountOut - amountOut * fee,\n    [amountOut, fee]\n  );\n\n  const feeAmountOutUsd: number = useMemo(() => {\n    if (\n      !currencyOutNative ||\n      !amountOut ||\n      !prices[currencyOutNative.coingeckoId]\n    )\n      return 0;\n    return amountOut * fee * prices[currencyOutNative.coingeckoId].usd;\n  }, [currencyOutNative, amountOut, prices, fee]);\n\n  // ---- USD price for the second currency (With fee)\n  const amountOutUsdWithFee: number = useMemo(() => {\n    if (\n      !currencyOutNative ||\n      !amountOutWithFee ||\n      !prices[currencyOutNative.coingeckoId]\n    )\n      return 0;\n    return amountOutWithFee * prices[currencyOutNative.coingeckoId].usd;\n  }, [currencyOutNative, amountOutWithFee, prices]);\n\n  // ===== RETURN\n  return (\n    <TertiaryBox fullWidth style={{ maxWidth: MAX_WIDTH, alignSelf: \"center\" }}>\n      <View style={{ width: \"100%\" }} onLayout={onLayout}>\n        <View\n          style={{\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n            width: \"100%\",\n            padding: layout.padding_x2_5,\n          }}\n        >\n          <SwapHeader\n            setSettingsOpened={setSettingsOpened}\n            networkDisplayName={selectedNetwork?.displayName}\n          />\n        </View>\n\n        <View style={{ width: \"100%\", paddingHorizontal: layout.padding_x2_5 }}>\n          <SeparatorGradient style={{ marginBottom: layout.padding_x2_5 }} />\n          <View style={styles.childrenContainer}>\n            <View style={styles.currencies}>\n              {/*======= First currency */}\n              <TertiaryBox\n                fullWidth\n                mainContainerStyle={styles.currencyBoxMainContainer}\n              >\n                {/*----- Selected currencyIn available amount */}\n                <View style={styles.counts}>\n                  <BrandText style={styles.availableAmount}>\n                    Available{\" \"}\n                    <BrandText style={{ color: primaryColor }}>\n                      {currencyInAmount}\n                    </BrandText>\n                  </BrandText>\n                  <View style={{ flexDirection: \"row\" }}>\n                    <SecondaryButton\n                      size=\"XS\"\n                      text=\"MAX\"\n                      onPress={onPressMax}\n                    />\n                    <SecondaryButton\n                      onPress={onPressHalf}\n                      size=\"XS\"\n                      text=\"HALF\"\n                      touchableStyle={{ marginLeft: layout.padding_x1 }}\n                    />\n                  </View>\n                </View>\n\n                {/*----- Selected currencyIn*/}\n                <Animated.View\n                  style={{\n                    opacity,\n                    width: \"100%\",\n                    transform: [{ translateY: translateRangeToBottom }],\n                  }}\n                >\n                  <View style={styles.currency}>\n                    <SelectedCurrency\n                      currency={currencyInNative}\n                      selectedNetworkId={selectedNetworkId}\n                      setRef={setDropdownInRef}\n                    />\n                    {/*----- Desired amount for swap */}\n                    <View>\n                      <TextInput\n                        style={styles.inputAmount}\n                        value={amountIn}\n                        placeholder=\"0\"\n                        placeholderTextColor={neutralA3}\n                        onChangeText={onChangeAmountIn}\n                      />\n                      <BrandText style={styles.amountUsd}>\n                        ≈ ${parseFloat(amountInUsd.toFixed(2).toString())}\n                      </BrandText>\n                    </View>\n                  </View>\n                </Animated.View>\n              </TertiaryBox>\n\n              {/*======= Second currency */}\n              <SpacerColumn size={1.5} />\n              <TertiaryBox\n                fullWidth\n                mainContainerStyle={styles.currencyBoxMainContainer}\n              >\n                <>\n                  {/*----- Invert button */}\n                  <CustomPressable\n                    onPress={onPressInvert}\n                    style={styles.invertButton}\n                  >\n                    {({ hovered }) => (\n                      <SVG\n                        source={hovered ? chevronCircleDown : chevronCircleUp}\n                        height={32}\n                        width={32}\n                      />\n                    )}\n                  </CustomPressable>\n\n                  {/*----- Selected currencyOut */}\n                  <Animated.View\n                    style={{\n                      opacity,\n                      width: \"100%\",\n                      transform: [{ translateY: translateRangeToTop }],\n                    }}\n                  >\n                    <View style={styles.currency}>\n                      <SelectedCurrency\n                        currency={currencyOutNative}\n                        selectedNetworkId={selectedNetworkId}\n                        setRef={setDropdownOutRef}\n                      />\n\n                      {/*----- Amount earned after swap */}\n                      <CurrencyAmount\n                        amount={amountOutWithFee}\n                        amountUsd={amountOutUsdWithFee}\n                        isApproximate\n                      />\n                    </View>\n                  </Animated.View>\n                </>\n              </TertiaryBox>\n            </View>\n\n            {/*======= Currencies In/Out equivalence */}\n            <SpacerColumn size={1.5} />\n            <SwapDetail\n              fee={fee}\n              spotPrice={spotPrice || \"\"}\n              amountIn={amountIn}\n              tokenNameIn={currencyInNative?.displayName || \"\"}\n              tokenNameOut={currencyOutNative?.displayName || \"\"}\n              feeAmountOutUsd={feeAmountOutUsd}\n              expectedAmountOut={amountOutWithFee}\n              slippage={slippage}\n            />\n\n            {/*======= Swap button */}\n            <SpacerColumn size={2.5} />\n            <PrimaryButton\n              size=\"XL\"\n              loader\n              text={\n                amountIn && parseFloat(amountIn) > parseFloat(currencyInAmount)\n                  ? \"Insufficient balance\"\n                  : \"Swap\"\n              }\n              fullWidth\n              disabled={\n                !amountIn ||\n                parseFloat(amountIn) === 0 ||\n                parseFloat(amountIn) > parseFloat(currencyInAmount)\n              }\n              onPress={onPressSwap}\n            />\n          </View>\n        </View>\n\n        {/*======= Set slippage */}\n        <SwapSettings\n          settingsOpened={settingsOpened}\n          setSlippageValue={setSlippage}\n        />\n        {/*======= Selectable currencies in */}\n        <SwapTokensList\n          width={viewWidth}\n          isOpened={!!dropdownOutRef && isDropdownOpen(dropdownOutRef)}\n          close={closeOpenedDropdown}\n          currencies={selectableCurrencies}\n          selectedNetworkId={selectedNetworkId}\n          setCurrency={setCurrencyOut}\n        />\n        {/*======= Selectable currencies out */}\n        <SwapTokensList\n          width={viewWidth}\n          isOpened={!!dropdownInRef && isDropdownOpen(dropdownInRef)}\n          close={closeOpenedDropdown}\n          currencies={selectableCurrencies}\n          selectedNetworkId={selectedNetworkId}\n          setCurrency={setCurrencyIn}\n        />\n      </View>\n    </TertiaryBox>\n  );\n};\n\nconst styles = StyleSheet.create({\n  loaderContainer: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  loaderBackground: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    backgroundColor: neutral00,\n    opacity: 0.6,\n    width: \"100%\",\n    height: \"100%\",\n  },\n  loader: {\n    position: \"absolute\",\n  },\n\n  headerContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    flex: 1,\n  },\n  headerLogoTitle: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  headerTitle: {\n    marginLeft: layout.padding_x2,\n  },\n\n  childrenContainer: {\n    alignItems: \"center\",\n    paddingBottom: layout.padding_x2_5,\n  },\n  currencyBoxMainContainer: {\n    padding: layout.padding_x2,\n  },\n\n  counts: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n    marginBottom: layout.padding_x2,\n  },\n  currencies: {\n    width: \"100%\",\n  },\n\n  currency: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n  },\n  invertButton: {\n    position: \"absolute\",\n    zIndex: 20,\n    top: -24,\n  },\n  availableAmount: {\n    color: neutral77,\n    ...StyleSheet.flatten(fontSemibold14),\n  },\n  inputAmount: {\n    height: \"100%\",\n    outlineStyle: \"none\",\n    color: secondaryColor,\n    maxWidth: 200,\n    textAlign: \"right\",\n    ...StyleSheet.flatten(fontSemibold20),\n  },\n  amount: {\n    textAlign: \"right\",\n  },\n  amountUsd: {\n    color: neutralA3,\n    textAlign: \"right\",\n    ...StyleSheet.flatten(fontSemibold14),\n  },\n});\n"],"sourceRoot":""}