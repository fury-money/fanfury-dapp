{"version":3,"sources":["assets/icons/price-history.svg","packages/components/nftDetails/components/CollapsablePriceHistory.tsx"],"names":["_path","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","props","viewBox","fill","xmlns","d","axisStyle","grid","strokeDasharray","stroke","padding","tickLabels","_objectSpread","StyleSheet","flatten","fontMedium14","neutral77","ticks","size","dependentAxisStyle","neutral33","CollapsablePriceHistory","_ref","nftId","data","useNFTPriceHistory","_parseNetworkObjectId","parseNetworkObjectId","network","_slicedToArray","networkKind","kind","currency","NetworkKind","Ethereum","convertedData","useMemo","map","y","ethers","utils","formatEther","BigNumber","from","price","x","Date","time","_jsx","CollapsableSection","icon","priceHistorySVG","title","isExpandedByDefault","children","_jsxs","View","style","styles","container","priceLabelTextContainer","BrandText","priceLabelText","VictoryChart","minDomain","top","bottom","left","right","height","VictoryAxis","domainPadding","layout","padding_x4","tickFormat","val","moment","format","dependentAxis","VictoryLine","primaryColor","border","transparentColor","parent","dataComponent","Curve","openCurve","pathComponent","Path","_parseNetworkObjectId3","useQuery","_asyncToGenerator","marketplaceClient","mustGetMarketplaceClient","id","NFTPriceHistory","unshift","now","toISOString","push","console","log","initialData","create","margin","padding_x2","marginTop","borderRadius","borderColor","borderWidth","flex","paddingTop","position","fontMedium10","transform","rotate","color"],"mappings":"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","file":"static/js/9.f56a6f81.chunk.js","sourcesContent":["var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgPriceHistory(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.034 1.586C7.3.6 8.7.6 8.966 1.586l1.006 3.737a1 1 0 00.705.705l3.737 1.006c.986.266.986 1.666 0 1.932l-3.737 1.006a1 1 0 00-.705.705l-1.006 3.737c-.266.986-1.666.986-1.932 0l-1.006-3.737a1 1 0 00-.705-.705L1.586 8.966C.6 8.7.6 7.3 1.586 7.034l3.737-1.006a1 1 0 00.705-.705l1.006-3.737z\",\n    fill: \"#fff\"\n  })));\n}\nexport default SvgPriceHistory;","// libraries\nimport { useQuery } from \"@tanstack/react-query\";\nimport { BigNumber, ethers } from \"ethers\";\nimport moment from \"moment\";\nimport React, { useMemo } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport {\n  VictoryLine,\n  VictoryChart,\n  VictoryAxis,\n  Curve,\n  Path,\n} from \"victory-native\";\n\nimport priceHistorySVG from \"../../../../assets/icons/price-history.svg\";\nimport { parseNetworkObjectId, NetworkKind } from \"../../../networks\";\nimport { mustGetMarketplaceClient } from \"../../../utils/backend\";\nimport {\n  neutral33,\n  neutral77,\n  primaryColor,\n  transparentColor,\n} from \"../../../utils/style/colors\";\nimport { fontMedium10, fontMedium14 } from \"../../../utils/style/fonts\";\nimport { layout } from \"../../../utils/style/layout\";\nimport { BrandText } from \"../../BrandText\";\nimport { CollapsableSection } from \"../../collapsable/CollapsableSection\";\n\nconst axisStyle = {\n  grid: { strokeDasharray: \"none\", stroke: \"none\", padding: 20 },\n  tickLabels: { ...StyleSheet.flatten(fontMedium14), fill: neutral77 },\n  ticks: { stroke: neutral77, size: 5 },\n};\nconst dependentAxisStyle = {\n  ...axisStyle,\n  grid: { ...axisStyle, stroke: neutral33 },\n};\n\nexport const CollapsablePriceHistory: React.FC<{ nftId: string }> = ({\n  nftId,\n}) => {\n  const data = useNFTPriceHistory(nftId);\n  const [network] = parseNetworkObjectId(nftId);\n  const networkKind = network?.kind;\n\n  const currency = networkKind === NetworkKind.Ethereum ? \"ETH\" : \"USD\";\n\n  const convertedData = useMemo(() => {\n    if (!data) {\n      return [];\n    }\n    return data.map((d) => ({\n      y:\n        networkKind === NetworkKind.Ethereum\n          ? +ethers.utils.formatEther(BigNumber.from(d.price))\n          : d.price,\n      x: new Date(d.time),\n    }));\n  }, [data, networkKind]);\n\n  return (\n    <CollapsableSection\n      icon={priceHistorySVG}\n      title=\"Price history\"\n      isExpandedByDefault\n    >\n      <View style={styles.container}>\n        <View style={styles.priceLabelTextContainer}>\n          <BrandText style={styles.priceLabelText}>\n            Price ({currency})\n          </BrandText>\n        </View>\n        <VictoryChart\n          minDomain={{ y: 0 }}\n          padding={{ top: 10, bottom: 40, left: 80, right: 0 }}\n          height={200}\n        >\n          <VictoryAxis\n            domainPadding={layout.padding_x4}\n            style={axisStyle}\n            tickFormat={(val) => moment(val).format(\"D MMM\")}\n          />\n          <VictoryAxis dependentAxis style={dependentAxisStyle} />\n\n          <VictoryLine\n            style={{\n              data: { stroke: primaryColor },\n              border: { stroke: transparentColor },\n\n              parent: { border: \"1px solid red\" },\n            }}\n            dataComponent={<Curve openCurve pathComponent={<Path />} />}\n            data={convertedData}\n          />\n        </VictoryChart>\n      </View>\n    </CollapsableSection>\n  );\n};\n\nconst useNFTPriceHistory = (nftId: string) => {\n  const [network] = parseNetworkObjectId(nftId);\n  const { data } = useQuery(\n    [\"nftPriceHistory\", nftId],\n    async () => {\n      const marketplaceClient = mustGetMarketplaceClient(network?.id);\n\n      const { data } = await marketplaceClient.NFTPriceHistory({\n        id: nftId,\n      });\n      if (data.length === 0) {\n        return data;\n      }\n\n      // hack: add start and end point for a cleaner curve\n      data.unshift({\n        price: data[0].price,\n        time: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n      });\n      data.push({\n        price: data[data.length - 1].price,\n        time: new Date().toISOString(),\n      });\n\n      console.log(\"data\", data);\n      return data;\n    },\n    { initialData: [] }\n  );\n  return data;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    margin: layout.padding_x2,\n    marginTop: 0,\n    borderRadius: layout.borderRadius * 0.67,\n    borderColor: neutral33,\n    borderWidth: 1,\n    flex: 1,\n    paddingTop: layout.padding_x2,\n  },\n  priceLabelTextContainer: {\n    flex: 1,\n    position: \"relative\",\n  },\n  priceLabelText: StyleSheet.flatten([\n    fontMedium10,\n    {\n      transform: [{ rotate: \"-90deg\" }],\n      position: \"absolute\",\n      left: -10,\n      top: 50,\n      bottom: 0,\n      color: neutral77,\n    },\n  ]),\n});\n"],"sourceRoot":""}